#!/usr/bin/env bash

set -eu

#default values
GOBIN=go
DEPS_FILE="Godeps"
GET_OPTIONS="-u -d"

## Functions/
usage() {
cat << EOF
SYNOPSIS

    gpm leverages the power of the go get command and the underlying version
    control systems used by it to set your Go dependencies to desired versions,
    thus allowing easily reproducible builds in your Go projects.

    A Godeps file in the root of your Go application is expected containing
    the import paths of your packages and a specific tag or commit hash
    from its version control system, an example Godeps file looks like this:

    $ cat Godeps
    # This is a comment
    github.com/nu7hatch/gotrail         v0.0.2
    github.com/replicon/fast-archiver   v1.02   #This is another comment!
    github.com/nu7hatch/gotrail         2eb79d1f03ab24bacbc32b15b75769880629a865

    gpm has a companion tool, called [gvp](https://github.com/pote/gvp) which
    provides vendoring functionalities, it alters your GOPATH so every project
    has its own isolated dependency directory, it's usage is recommended.

USAGE
      $ gpm             # Same as 'install'.
      $ gpm install     # Parses the Godeps file, installs dependencies and sets
                        # them to the appropriate version.
      $ gpm version     # Outputs version information
      $ gpm help        # Prints this message

INSTALL FLAGS

      These flags are available when using the "install" command

      -f           The file to parse. By default this is "Godeps"

      -g           The go binary to use. Defaults to "go"

      -u      	   Whether or not to use the -u option with "go get".
                   Set to 0 to turn off. Defaults to 1.

EXAMPLES
     Call gpm with a deps file named Foodeps
     $ gpm -f Foodeps

     Use GAE's goapp as the go binary, and disable networking on goapp get
     $ gpm -g "./go_appengine/goapp" -u 0

EOF
}

is_in_use() {
  [[ -e "$1/.git/index.lock" || -e "$1/.hg/store/lock"  || -e "$1/.bzr/checkout/lock" ]]
}

parse_install_flags() {
  while getopts "f:g:u:" OPTION; do
     case $OPTION in
         f)
             DEPS_FILE=$OPTARG
             ;;
         g)
             GOBIN=$OPTARG
             ;;
         u)
             if [ $OPTARG -eq 0 ]
             then
               GET_OPTIONS="-d"
             fi
             ;;
     esac
  done
  shift $(($OPTIND-1)) #didn't your mother always tell you to clean up after yourself?
}

# Iterates over Godep file dependencies and sets
# the specified version on each of them.
set_dependencies() {
  local deps=$(sed 's/#.*//;/^\s*$/d' < $1) || echo ""

  while read package version; do
    (
      local install_path="${GOPATH%%:*}/src/${package%%/...}"
      echo ">> Getting package "$package""

      # Retries in case of possible race conditions when installing a package
      # dependency
      for ((i=0; i<5; i++)); do
        out=$($GOBIN get $GET_OPTIONS "$package" 2>&1 >/dev/null) && break
      done
      [[ $? != 0 ]] && echo "-- Failed to get "$package", error: " && echo "$out" && exit 1

      echo ">> Setting $package to version $version"
      cd $install_path
      is_in_use $install_path && wait

      [ -d .hg  ] && hg update    -q      "$version"
      [ -d .git ] && git checkout -q      "$version"
      [ -d .bzr ] && bzr revert   -q -r   "$version"
      [ -d .svn ] && svn update   -r      "$version"
    ) &
  done < <(echo "$deps")
  wait
  echo ">> All Done"
}

## /Functions

## Command Line Parsing
case "${1:-"install"}" in
  "version")
    echo ">> gpm v1.2.3"
    ;;
  "install")
    parse_install_flags "${@:2}"
    [[ -f "$DEPS_FILE" ]] || (echo ">> $DEPS_FILE file does not exist." && exit 1)
    (which $GOBIN > /dev/null) ||
      ( echo ">> $GOBIN is currently not installed or in your PATH" && exit 1)
    set_dependencies $DEPS_FILE
    ;;
  "help")
    usage
    ;;
  *)
    ## Support for Plugins: if command is unknown search for a gpm-command executable.
    if command -v "gpm-$1" > /dev/null
    then
      plugin=$1 &&
      shift     &&
      gpm-$plugin $@ &&
      exit
    else
      usage && exit 1
    fi
    ;;
esac
